// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package carlibrary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarLibraryServiceClient is the client API for CarLibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarLibraryServiceClient interface {
	//查看所有品牌
	FindALLCarBand(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CarBandList, error)
	//查看某品牌的全部车系
	FindAllCarSeries(ctx context.Context, in *CarSeriesRequest, opts ...grpc.CallOption) (*CarSeriesList, error)
	//查看某品牌的某车系的全部车型
	FindAllCarModel(ctx context.Context, in *CarModelRequest, opts ...grpc.CallOption) (*CarModelList, error)
}

type carLibraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarLibraryServiceClient(cc grpc.ClientConnInterface) CarLibraryServiceClient {
	return &carLibraryServiceClient{cc}
}

func (c *carLibraryServiceClient) FindALLCarBand(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CarBandList, error) {
	out := new(CarBandList)
	err := c.cc.Invoke(ctx, "/carlibrary.CarLibraryService/FindALLCarBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carLibraryServiceClient) FindAllCarSeries(ctx context.Context, in *CarSeriesRequest, opts ...grpc.CallOption) (*CarSeriesList, error) {
	out := new(CarSeriesList)
	err := c.cc.Invoke(ctx, "/carlibrary.CarLibraryService/FindAllCarSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carLibraryServiceClient) FindAllCarModel(ctx context.Context, in *CarModelRequest, opts ...grpc.CallOption) (*CarModelList, error) {
	out := new(CarModelList)
	err := c.cc.Invoke(ctx, "/carlibrary.CarLibraryService/FindAllCarModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarLibraryServiceServer is the server API for CarLibraryService service.
// All implementations must embed UnimplementedCarLibraryServiceServer
// for forward compatibility
type CarLibraryServiceServer interface {
	//查看所有品牌
	FindALLCarBand(context.Context, *Empty) (*CarBandList, error)
	//查看某品牌的全部车系
	FindAllCarSeries(context.Context, *CarSeriesRequest) (*CarSeriesList, error)
	//查看某品牌的某车系的全部车型
	FindAllCarModel(context.Context, *CarModelRequest) (*CarModelList, error)
	mustEmbedUnimplementedCarLibraryServiceServer()
}

// UnimplementedCarLibraryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarLibraryServiceServer struct {
}

func (UnimplementedCarLibraryServiceServer) FindALLCarBand(context.Context, *Empty) (*CarBandList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindALLCarBand not implemented")
}
func (UnimplementedCarLibraryServiceServer) FindAllCarSeries(context.Context, *CarSeriesRequest) (*CarSeriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllCarSeries not implemented")
}
func (UnimplementedCarLibraryServiceServer) FindAllCarModel(context.Context, *CarModelRequest) (*CarModelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllCarModel not implemented")
}
func (UnimplementedCarLibraryServiceServer) mustEmbedUnimplementedCarLibraryServiceServer() {}

// UnsafeCarLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarLibraryServiceServer will
// result in compilation errors.
type UnsafeCarLibraryServiceServer interface {
	mustEmbedUnimplementedCarLibraryServiceServer()
}

func RegisterCarLibraryServiceServer(s grpc.ServiceRegistrar, srv CarLibraryServiceServer) {
	s.RegisterService(&CarLibraryService_ServiceDesc, srv)
}

func _CarLibraryService_FindALLCarBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLibraryServiceServer).FindALLCarBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carlibrary.CarLibraryService/FindALLCarBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLibraryServiceServer).FindALLCarBand(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarLibraryService_FindAllCarSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLibraryServiceServer).FindAllCarSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carlibrary.CarLibraryService/FindAllCarSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLibraryServiceServer).FindAllCarSeries(ctx, req.(*CarSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarLibraryService_FindAllCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLibraryServiceServer).FindAllCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carlibrary.CarLibraryService/FindAllCarModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLibraryServiceServer).FindAllCarModel(ctx, req.(*CarModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarLibraryService_ServiceDesc is the grpc.ServiceDesc for CarLibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarLibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carlibrary.CarLibraryService",
	HandlerType: (*CarLibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindALLCarBand",
			Handler:    _CarLibraryService_FindALLCarBand_Handler,
		},
		{
			MethodName: "FindAllCarSeries",
			Handler:    _CarLibraryService_FindAllCarSeries_Handler,
		},
		{
			MethodName: "FindAllCarModel",
			Handler:    _CarLibraryService_FindAllCarModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carlibrary.proto",
}
