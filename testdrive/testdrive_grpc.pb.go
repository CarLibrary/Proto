// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testdrive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestDriveServerClient is the client API for TestDriveServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestDriveServerClient interface {
	//试驾
	TestDrive(ctx context.Context, in *TestDriveRequest, opts ...grpc.CallOption) (*TestDriveResponse, error)
	//查看我的试驾
	FindMyTestDrive(ctx context.Context, in *MyTestDriveRequest, opts ...grpc.CallOption) (TestDriveServer_FindMyTestDriveClient, error)
}

type testDriveServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTestDriveServerClient(cc grpc.ClientConnInterface) TestDriveServerClient {
	return &testDriveServerClient{cc}
}

func (c *testDriveServerClient) TestDrive(ctx context.Context, in *TestDriveRequest, opts ...grpc.CallOption) (*TestDriveResponse, error) {
	out := new(TestDriveResponse)
	err := c.cc.Invoke(ctx, "/score.TestDriveServer/TestDrive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testDriveServerClient) FindMyTestDrive(ctx context.Context, in *MyTestDriveRequest, opts ...grpc.CallOption) (TestDriveServer_FindMyTestDriveClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestDriveServer_ServiceDesc.Streams[0], "/score.TestDriveServer/FindMyTestDrive", opts...)
	if err != nil {
		return nil, err
	}
	x := &testDriveServerFindMyTestDriveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestDriveServer_FindMyTestDriveClient interface {
	Recv() (*TestDriveResponse, error)
	grpc.ClientStream
}

type testDriveServerFindMyTestDriveClient struct {
	grpc.ClientStream
}

func (x *testDriveServerFindMyTestDriveClient) Recv() (*TestDriveResponse, error) {
	m := new(TestDriveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestDriveServerServer is the server API for TestDriveServer service.
// All implementations must embed UnimplementedTestDriveServerServer
// for forward compatibility
type TestDriveServerServer interface {
	//试驾
	TestDrive(context.Context, *TestDriveRequest) (*TestDriveResponse, error)
	//查看我的试驾
	FindMyTestDrive(*MyTestDriveRequest, TestDriveServer_FindMyTestDriveServer) error
	mustEmbedUnimplementedTestDriveServerServer()
}

// UnimplementedTestDriveServerServer must be embedded to have forward compatible implementations.
type UnimplementedTestDriveServerServer struct {
}

func (UnimplementedTestDriveServerServer) TestDrive(context.Context, *TestDriveRequest) (*TestDriveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDrive not implemented")
}
func (UnimplementedTestDriveServerServer) FindMyTestDrive(*MyTestDriveRequest, TestDriveServer_FindMyTestDriveServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMyTestDrive not implemented")
}
func (UnimplementedTestDriveServerServer) mustEmbedUnimplementedTestDriveServerServer() {}

// UnsafeTestDriveServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestDriveServerServer will
// result in compilation errors.
type UnsafeTestDriveServerServer interface {
	mustEmbedUnimplementedTestDriveServerServer()
}

func RegisterTestDriveServerServer(s grpc.ServiceRegistrar, srv TestDriveServerServer) {
	s.RegisterService(&TestDriveServer_ServiceDesc, srv)
}

func _TestDriveServer_TestDrive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDriveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestDriveServerServer).TestDrive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.TestDriveServer/TestDrive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestDriveServerServer).TestDrive(ctx, req.(*TestDriveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestDriveServer_FindMyTestDrive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MyTestDriveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestDriveServerServer).FindMyTestDrive(m, &testDriveServerFindMyTestDriveServer{stream})
}

type TestDriveServer_FindMyTestDriveServer interface {
	Send(*TestDriveResponse) error
	grpc.ServerStream
}

type testDriveServerFindMyTestDriveServer struct {
	grpc.ServerStream
}

func (x *testDriveServerFindMyTestDriveServer) Send(m *TestDriveResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TestDriveServer_ServiceDesc is the grpc.ServiceDesc for TestDriveServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestDriveServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score.TestDriveServer",
	HandlerType: (*TestDriveServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestDrive",
			Handler:    _TestDriveServer_TestDrive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMyTestDrive",
			Handler:       _TestDriveServer_FindMyTestDrive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "testdrive.proto",
}
